group 'pl.nepras'
version '1.0.1'

// define variables for application
def title = 'ITGolo AutoArchive MSSQL'
def version = version
def companyName = 'ITGolo'
def jreMinVersion = '1.8.0'

apply plugin: 'java'
sourceCompatibility = 1.8

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.edu.sc.seis.gradle:launch4j:1.6.2"
    }
}

apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'edu.sc.seis.launch4j'

sourceCompatibility = '1.8'

// for distribution plugin
distributions {
    main{
        baseName = rootProject.name
    }
}

// Selected files from java will be copied to the folder resources.
sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
            includes = ["**/*.fxml","**/*.xml", "**/*.properties", "**/*.css",
                        "**/*.png", "**/*.gif", "**/*.jpg", "**/*.ico"]
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.1.Final'
    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.4'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.6.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.6.2'
    compile group: 'net.sourceforge.jtds', name: 'jtds', version: '1.3.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

/*
The application name and version of the application is declared once.
These data are collected by the application through
application.properties file, which is transferred
to the folder resources by setting sourceSets.
*/
File propsFile = new File("$project.rootDir/src/main/java/Application/Resources/Properties/application.properties")
Properties props = new Properties()
props.setProperty("version",version)
props.setProperty("title",title)
props.store(propsFile.newWriter(), null)


// Settings for the creation of the output file jar.
jar {
    manifest {
        attributes 'Implementation-Title': title,
                'Implementation-Version': version,
                "Main-Class": "start",
                "Class-Path": configurations.runtime.files.collect { "lib/$it.name" }.join(' ')

    }
    baseName = project.name
}

// Configuration for launch4j
launch4j {
    mainClassName = 'start'
    outfile = "${project.name}-${version}.exe"
    icon = "${project.rootDir}/src/main/java/Application/Resources/Assets/Images/Icons/app.ico"
    version = "${version}"
    companyName = "${companyName}"
    productName = "${title}"
    jreMinVersion = "${jreMinVersion}"
    copyright = "${companyName}"
    description = "${title}"
}

// Run application from tasks of gradle
task runApplication(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "start"
}